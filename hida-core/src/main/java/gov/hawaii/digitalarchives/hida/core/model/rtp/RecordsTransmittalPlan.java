package gov.hawaii.digitalarchives.hida.core.model.rtp;

import java.io.Serializable;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;

import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.slf4j.Logger;
import org.springbyexample.util.log.AutowiredLogger;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.transaction.annotation.Transactional;

/**
 * Model class for a Records Transmittal Plan (RTP).
 * <p>
 * A Records Transmittal Plan contains data about a certain type of record,
 * its significant properties, and administrative information about the the
 * records.
 *
 * @author Dongie Agnir
 * @author Keone Hiraide
 */
@Entity // Declares the class as an entity (i.e. a persistent POJO class).
@Configurable // As a result, any time you instantiate an object, 
              // Spring will attempt to perform dependency
              // injection on that object. This occurs for instantiation 
              // via the "new" keyword, as well as via reflection. In effect
              // this feature allows dependency injection of any object at all in your
              // system, which is a very useful feature (without @Configurable you'd
              // only be able to dependency inject objects acquired from Spring or
              // subsequently presented to a specific Spring dependency injection
              // method).
@Table(name="RECORDS_TRANSMITTAL_PLAN")
public class RecordsTransmittalPlan implements Serializable {

    /**
     * Autogenerated for this entity to be serializable. Implementing
     * Serializable isn't strictly necessary as far as the JPA specification
     * is concerned. However, it is needed if you're going to use caching or
     * EJB remoting, both of which require objects to be Serializable.
     * Caching is a key component in achieving optimal performance in any
     * JPA application, so implementing the Serializable interface is a good
     * habit to adopt. Note: This was taken from the book titled, 
     * "Spring Persistence with Hibernate", 2010, Fisher and Murphy. 
     */
    private static final long serialVersionUID = -948272744350042966L;


    @Id
    @NotNull
    @Column(name="RECORDS_TRANSMITTAL_PLAN_ID", unique = true)
    private String primaryId;


    /**
     * Specifies the version field or property of an entity class that serves 
     * as its optimistic lock value. The version is used to ensure 
     * integrity when performing the merge operation and for optimistic 
     * concurrency control. 
     */
    @Version
    @Column(name = "VERSION")
    private Integer version;


    /**
     * Id of the index parser associated with a RecordsTransmittalPlan.
     */
    @NotNull
    @Column(name="PARSER_ID",unique = true)
    private String parserId;

   /**
     * An {@link EntityManager} instance is associated with a persistence 
     * context. A persistence context is a set of entity instances in which 
     * for any persistent entity identity there is a unique entity instance. 
     * Within the persistence context,the entity instances and their life cycle
     * are  managed. The EntityManager API is used to create and remove 
     * persistent entity instances, to find  entities by their primary key, 
     * and to query over entities. As long as an object is attached to an 
     * EntityManager, all changes to the object will be synchronized with 
     * the database automatically (Meaning that this object is attached to the
     * 'persistence context'). 
     */
    @PersistenceContext
    transient EntityManager entityManager;
    
    /** Autowired logger to log this class */
    private transient Logger log = null;
    
    
    /**
     * A new entity manager is created for every persistence related function. 
     * This pattern is called an “entitymanger-per-request” pattern. 
     * In this model, a request from the client is sent to the server 
     * (where the JPA persistence layer runs), a new EntityManager is opened, 
     * and all database operations are executed in this unit of work. Once the 
     * work has been completed (and the response for the client has been
     * prepared), the persistence context is flushed and closed, as well 
     * as the entity manager object. You would also use a single database 
     * transaction to serve the clients request. The relationship between 
     * the two is one-to-one and this model is a perfect fit for many 
     * applications.
     *  
     *  http://docs.jboss.org/hibernate/entitymanager/
     *  
     * @return A new EntityManager to do database operations.
     */
    public static final EntityManager entityManager() {
        staticMethodLogger().debug("Entering entityManager()");
        EntityManager em = new RecordsTransmittalPlan().entityManager;
        if (em == null) {
            String errorMessage = "Throwing IllegalStateException in "
                    + "entityManager(): 'Entity manager has not been injected " +
                "(is the Spring Aspects JAR configured as an AJC/AJDT aspects library?'";
            staticMethodLogger().error(errorMessage);
            throw new IllegalStateException(errorMessage);
        }
        staticMethodLogger().debug("Exiting entityManager(): {}", em);
        return em;
    }
    
    
    /**
     * Used to log static methods of this class. Since
     * Autowired logger cannot be "static", this method allows an 
     * Autowired Logger to be used within static methods.
     * 
     * @return A new logger to do logging operations.
     */
    public static final Logger staticMethodLogger() {
        Logger log = new RecordsTransmittalPlan().log;
        if (log == null) 
            throw new IllegalStateException("AutowiredLogger has not been"
                + " injected!");
        return log;
    }


    /**
     * Gets the primaryId of type {@link java.net.URI}, of a 
     * RecordsTransmittalPlan.
     * 
     * @return The primaryId of this RecordsTransmittalPlan.
     */
    public String getPrimaryId() {
        log.debug("Entering getPrimaryId()");
        log.debug("Exiting getPrimaryId(): {}", primaryId);
        return primaryId;
    }


    /**
     * Sets the primaryId of a RecordsTransmittalPlan.
     * 
     * @param primaryId The primaryId to set for this RecordsTransmittalPlan.
     */
    public void setPrimaryId(final String primaryId) {
        log.debug("Entering setPrimaryId(primaryId = {})", primaryId);
        this.primaryId = primaryId;
        log.debug("Exiting setPrimaryId()");
    }

    /**
     * Gets the amount of RecordsTransmittalPlan objects that are currently 
     * in the database.
     * 
     * @return The amount of RecordsTransmittalPlan objects that are 
     *         currently in the database.
     */
    public static long countRecordsTransmittalPlans() {
        staticMethodLogger().debug("Entering countRecordsTransmittalPlans()");
        long count = entityManager().createQuery("SELECT COUNT(o) FROM RecordsTransmittalPlan o",
                Long.class).getSingleResult();
        staticMethodLogger().debug("Exiting countRecordsTransmittalPlans(): {}", count);
        return count;
    }


    /**
     * Gets a all the RecordsTransmittalPlan objects from the database 
     * and puts them in a collection. 
     * 
     * @return The collection of RecordsTransmittalPlans that are 
     *         in the database.
     */
    public static List<RecordsTransmittalPlan> findAllRecordsTransmittalPlans() {
        staticMethodLogger().debug("Entering findAllRecordsTransmittalPlans()");
        List<RecordsTransmittalPlan> rtp = entityManager()
                .createQuery("SELECT o FROM RecordsTransmittalPlan o",
                RecordsTransmittalPlan.class).getResultList();
        staticMethodLogger().debug("Exiting findAllRecordsTransmittalPlans(): {}", rtp);
        return rtp;
    }


    /**
     * Gets a certain subset of RecordsTransmittalPlans based 
     * on the range desired.
     * 
     * @param  firstResult The beginning of the range of values.
     * @param  maxResults The last element of the range of values.
     * @return The collection of RecordsTransmittalPlans 
     *         based on the range desired.
     */
    public static RecordsTransmittalPlan findRecordsTransmittalPlan(String primaryId) {
        staticMethodLogger().debug("Entering findRecordsTransmittalPlan(primaryId = {})",
                primaryId);
        if (primaryId == null || primaryId.length() <= 0) {
            staticMethodLogger().debug("Exiting findRecordsTransmittalPlan(): null");
            return null;
        }
        RecordsTransmittalPlan rtp = entityManager().find(RecordsTransmittalPlan.class,
                primaryId);
        staticMethodLogger().debug("Exiting findRecordsTransmittalPlan(): {})", rtp);
        return rtp;
    }

    /**
     * Sets the parserId of a RecordsTransmittalPlan.
     * 
     * @param parserId The parserId to set for this RecordsTransmittalPlan.
     */
    public void setParserId(final String parserId) {
        log.debug("Entering setParserId(parserId = {})", parserId);
        this.parserId = parserId;
        log.debug("Exiting setParserId()");
    }

    /**
     * Gets a certain subset of RecordsTransmittalPlans based 
     * on the range desired.
     * 
     * @param firstResult  The beginning of the range of values.
     * @param maxResults   The last element of the range of values.
     * @return             The collection of RecordsTransmittalPlans based 
     *                     on the range desired. 
     */
    public static List<RecordsTransmittalPlan> 
    findRecordsTransmittalPlanEntries(int firstResult, int maxResults) {
        staticMethodLogger().debug("Entering findRecordsTransmittalPlanEntries" +
        		"(firstResult = {}, maxResults = {})",
                firstResult, maxResults);
        List<RecordsTransmittalPlan> rtps = entityManager()
                .createQuery("SELECT o FROM RecordsTransmittalPlan o",
                        RecordsTransmittalPlan.class)
                .setFirstResult(firstResult).setMaxResults(maxResults)
                .getResultList();
        staticMethodLogger().debug("Exiting findRecordsTransmittalPlanEntries(): {}", rtps);
        return rtps;
    }


    /**
     * If you call clear, all currently managed objects of the EntityManager 
     * will be detached and the status is not synchronized with the database. 
     * As long as the objects are not explicitly attached again, they are 
     * standard Java objects, whose change does not have any effect on 
     * the database.
     */
    @Transactional
    public void clear() {
        log.debug("Entering clear()");
        if (this.entityManager == null) 
            this.entityManager = entityManager();
        this.entityManager.clear();
        log.debug("Exiting clear()");

    }

    
    /**
     * Sets the version of this RecordsTransmittalPlan.
     * 
     * @param version The version of this RecordsTransmittalPlan.
     */
    public void setVersion(Integer version) {
        log.debug("Entering setVersion(version = {})", version);
        this.version = version;
        log.debug("Exiting setVersion()");
    }
    
    /**
     * @return The parserId of this RecordsTransmittalPlan.
     */    
    public String getParserId() {
        log.debug("Entering getParserId()");
        log.debug("Exiting getPrimaryId(): {}", parserId);
        return parserId;
    }

    /**
     * Gets the version of this RecordsTransmittalPlan.
     * 
     * @return The version of this RecordsTransmittalPlan.
     */
    public Integer getVersion() {
        log.debug("Entering getVersion()");
        log.debug("Exiting getVersion(): {}", this.version);
        return this.version;
    }


    /**
     * If this object is detached, the merge() method will merge them back into
     * the EntityManager to become managed again. Note that changes to detached
     * entity objects are not stored in the database.
     * 
     * @return The merged RecordsTransmittalPlan.
     */
    @Transactional
    public RecordsTransmittalPlan merge() {
        log.debug("Entering merge()");
        if (this.entityManager == null) 
            this.entityManager = entityManager();
        RecordsTransmittalPlan merged = this.entityManager.merge(this);
        this.entityManager.flush();
        log.debug("Exiting merge(): {}", merged);
        return merged;
    }


    /**
     * Persists this object to the persistence context. 
     */
    @Transactional
    public void persist() {
        log.debug("Entering persist()");
        if (this.entityManager == null) 
            this.entityManager = entityManager();
        this.entityManager.persist(this);
        log.debug("Exiting persist()");
    }


    /**
     * Removes this object from the persistence context. 
     */
    @Transactional
    public void remove() {
        log.debug("Entering remove()");
        if (this.entityManager == null) 
            this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            RecordsTransmittalPlan attached = RecordsTransmittalPlan
                    .findRecordsTransmittalPlan(this.primaryId);
            this.entityManager.remove(attached);
        }
        log.debug("Exiting remove()");
    }


    /**
     * Synchronize the persistence context to the underlying database.
     */
    @Transactional
    public void flush() {
        log.debug("Entering flush()");
        if (this.entityManager == null) 
            this.entityManager = entityManager();
        this.entityManager.flush();
        log.debug("Exiting flush()");
    }

    /**
     *  Assists in implementing Object.toString() methods using reflection.
     *  This class uses reflection to determine the fields to append. Because 
     *  these fields are usually private, the class changes the visibility of 
     *  the fields. This will fail under a security manager,
     *  unless the appropriate permissions are set up correctly. 
     */
    @Override
    public String toString() {
        log.debug("Entering toString()");
        String toString = ReflectionToStringBuilder.toString(this,
                ToStringStyle.SHORT_PREFIX_STYLE);
        log.debug("Exiting toString(): {}", toString);
        return toString;
    }
    
    /**
     * Sets the logger for this class.
     * 
     * @param log The logger for this class.
     */
    @AutowiredLogger
    public void setLog(Logger log) {
        this.log = log;
    }
}
