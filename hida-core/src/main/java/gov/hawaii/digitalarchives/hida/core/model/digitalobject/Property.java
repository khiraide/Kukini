package gov.hawaii.digitalarchives.hida.core.model.digitalobject;

import java.io.Serializable;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import javax.persistence.Version;

import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.slf4j.Logger;
import org.springbyexample.util.log.AutowiredLogger;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.transaction.annotation.Transactional;

/**
 * Property model class. 
 * <p>
 * Use to encapsulate extra properties (treated as key-value pairs) not
 * already provided by one  of the methods of {@link FileObject}.
 * <p>
 * @author Dongie Agnir
 * @author Keone Hiraide
 */
@Configurable
@Entity
@Table(name = "PROPERTY")
public class Property implements Serializable {
	
	/**
	 * Autogenerated for this entity to be serializable. Implementing
	 * Serializable isn't strictly necessary as far as the JPA specification
	 * is concerned. However, it is needed if you're going to use caching or
	 * EJB remoting, both of which require objects to be Serializable.
	 * Caching is a key component in achieving optimal performance in any
	 * JPA application, so implementing the Serializable interface is a good
	 * habit to adopt. Note: This was taken from the book titled, 
	 * "Spring Persistence with Hibernate", 2010, Fisher and Murphy. 
	 */
	private static final long serialVersionUID = 4466017627252455727L;

	/**
	 * An {@link EntityManager} instance is associated with a persistence 
	 * context. A persistence context is a set of entity instances in which 
	 * for any persistent entity identity there is a unique entity instance. 
	 * Within the persistence context, the entity instances and their life cycle 
	 * are  managed. The EntityManager API is used to create and remove 
	 * persistent entity instances, to find  entities by their primary key, 
	 * and to query over entities. As long as an object is attached to an 
	 * EntityManager, all changes to the object will be synchronized with 
	 * the database automatically (Meaning that this object is attached to the
	 * 'persistence context'). 
	 */
	@PersistenceContext
    transient EntityManager entityManager;
	
	/** Autowired logger to log this class */
    private transient Logger log = null;

	/**
	 * The name of the property.
	 */
	@Column(name="NAME")
	private String name;

	/**
	 * Primary key id of this Property class.
	 */
	@Id
    @GeneratedValue(strategy = GenerationType.TABLE)
    @Column(name = "PROPERTY_ID")
    private Long primaryId;

	/**
	 * The value of the property.
	 */
	@Column(name="VALUE")
	private String value;
	
	
	/**
	 * Specifies the version field or property of an entity class that serves 
	 * as its optimistic lock value. The version is used to ensure 
	 * integrity when performing the merge operation and for optimistic 
	 * concurrency control. 
	 */
	@Version
    @Column(name = "VERSION")
    private Integer version;
	
	
	/**
     * Many Property objects are associated with a single DigitalObject object.
     * A DigitalObject object's primary key will be used as as a foreign key
     * in this Property object/table.
     */
	@ManyToOne(cascade=CascadeType.ALL)
	@JoinColumn(name="DIGITAL_OBJECT_ID")
	private DigitalObject digitalObject;
	
	/**
     * A new entity manager is created for every persistence related function. 
     * This pattern is called an “entitymanger-per-request” pattern. 
     * In this model, a request from the client is sent to the server 
     * (where the JPA persistence layer runs), a new EntityManager is opened, 
     * and all database operations are executed in this unit of work. Once the 
     * work has been completed (and the response for the client has been
     * prepared), the persistence context is flushed and closed, as well 
     * as the entity manager object. You would also use a single database 
     * transaction to serve the clients request. The relationship between 
     * the two is one-to-one and this model is a perfect fit for many 
     * applications.
     *  
     * http://docs.jboss.org/hibernate/entitymanager/
     *  
     * @return A new EntityManager to do database operations.
     */
    public static final EntityManager entityManager() {
        staticMethodLogger().debug("Entering entityManager()");
        EntityManager em = new Property().entityManager;
        if (em == null) {
            staticMethodLogger().error("Throwing IllegalStateException in "
                    + "entityManager(): 'Entity manager has not been injected "
                + "(is the Spring Aspects JAR configured as an AJC/AJDT aspects library?'");
            
            throw new IllegalStateException(
                    "Entity manager has not been injected"
                            + " (is the Spring Aspects JAR configured as an " +
                            "AJC/AJDT aspects library?)");
        }
        staticMethodLogger().debug("Exiting entityManager(): {}", em);
        return em;
    }
    
    
    
    /**
     * Used to log static methods of this class. Since
     * Autowired logger cannot be "static", this method allows an 
     * Autowired Logger to be used within static methods.
     * 
     * @return A new logger to do logging operations.
     */
    private static final Logger staticMethodLogger() {
        Logger log = new Property().log;
        if (log == null) {
            throw new IllegalStateException("AutowiredLogger has not been"
                    + " injected!");
        }
        return log;
    }
    
    
	
	/**
	 * Gets the amount of Property objects that are currently 
	 * in the database.
	 * 
	 * @return The amount of Property objects that are 
	 *         currently in the database.
	 */
	public static long countProperties() {
	    staticMethodLogger().debug("Entering countProperties()");
        long count = entityManager().createQuery("SELECT COUNT(o) FROM Property o",
                Long.class).getSingleResult();
        staticMethodLogger().debug("Exiting countProperties(): {}", count);
        return count;
    }
	
	
	
	/**
	 * Gets all the Property objects from the database 
	 * and puts them in a collection. 
	 * 
	 * @return The collection of Properties that are 
	 *         in the database.
	 */
	public static List<Property> findAllProperties() {
	    staticMethodLogger().debug("Entering findAllProperties()");
        List<Property> properties = entityManager().createQuery("SELECT o FROM Property o",
                Property.class).getResultList();
        staticMethodLogger().debug("Exiting findAllProperties(): {}", properties);
        return properties;
    }
	
	
	
	/**
	 * Queries for a Property based on its primaryId.
	 * 
	 * @param primaryId  The long primaryId associated with this Property.
	 * @return    The Property that is associated with the primaryId being 
	 *            searched for.
	 */
	public static Property findProperty(Long primaryId) {
	    staticMethodLogger().debug("Entering findProperty(primaryId = {})", primaryId);
        if (primaryId == null) {
            staticMethodLogger().debug("Exiting findProperty(): null)");
            return null;
        }
        Property property = entityManager().find(Property.class, primaryId);
        staticMethodLogger().debug("Exiting findProperty(): {})", property);
        return property;
    }

	
	
	/**
	 * Gets a certain subset of Properties based 
	 * on the range desired.
	 * 
	 * @param firstResult  The beginning of the range of values.
	 * @param maxResults   The last element of the range of values.
	 * @return             The collection of Properties based 
	 *                     on the range desired. 
	 */
	public static List<Property> 
	findPropertyEntries(int firstResult, int maxResults) {
	    staticMethodLogger().debug("Entering findPropertyEntries(firstResult = {}, " +
                "maxResults = {})",
                firstResult, maxResults);
        
        List<Property> properties = entityManager()
                .createQuery("SELECT o FROM Property o", Property.class)
                .setFirstResult(firstResult).setMaxResults(maxResults)
                .getResultList();
        
        staticMethodLogger().debug("Exiting findPropertyEntries(): {}", properties);
        return properties;
    }

	
	
	/**
	 * @return The name of the property.
	 */
	public String getName() {
	    log.debug("Entering getName()");
	    log.debug("Exiting getName(): {}", this.name);
        return this.name;
    }
	
	
	
	/**
	 * @return The primaryId of a Property.
	 */
	public Long getPrimaryId() {
	    log.debug("Entering getPrimaryId()");
	    log.debug("Exiting getPrimaryId(): {}", this.primaryId);
        return this.primaryId;
    }

	
	
	/**
	 * @return The value of the property.
	 */
	public String getValue() {
	    log.debug("Entering getValue()");
	    log.debug("Exiting getValue(): {}", this.value);
        return this.value;
    }

	
	/**
	 * Gets the version of this Property.
	 * 
	 * @return The version of this Property.
	 */
	public Integer getVersion() {
	    log.debug("Entering getVersion()");
	    log.debug("Exiting getVersion(): {}", this.version);
        return this.version;
    }
	
	/**
     * Sets the name of this property.
     */
	public void setName(String name) {
	    log.debug("Entering setName(name = {}", name);
        this.name = name;
        log.debug("Exiting setName()");
    }
	
	/**
	 * Sets the primaryId of this Property.
	 * 
	 * @param primaryId  The primaryId that you want to set in
	 *            this Property.
	 */
	public void setPrimaryId(Long primaryId) {
	    log.debug("Entering setPrimaryId(name = {}", primaryId);
        this.primaryId = primaryId;
        log.debug("Exiting setPrimaryId()");
    }

	
	
	/**
	 * Sets the value of this Property.
	 * @param value The value that you want to set in this Property.
	 */
	public void setValue(String value) {
	    log.debug("Entering setValue(name = {}", value);
        this.value = value;
        log.debug("Exiting setValue()");
    }
	
	/**
	 * Sets the {@link DigitalObject} of this Property.
	 * 
	 * @param digitalObject  The {@link DigitalObject} associated with this
	 *                       Property.
	 */
	public void setDigitalObject(DigitalObject digitalObject) {
	    log.debug("Entering setDigitalObject(digitalObject = {}", digitalObject);
        this.digitalObject = digitalObject;
        log.debug("Exiting setDigitalObject()");
    }
	
	
	
	/**
	 * Gets the {@link DigitalObject} of this Property.
	 * 
	 * @return The {@link DigitalObject} associated with this Property.
	 */
	public DigitalObject getDigitalObject() {
	    log.debug("Entering getDigitalObject()");
	    log.debug("Exiting getDigitalObject(): {}", this.digitalObject);
        return this.digitalObject;
    }

	
	
	/**
	 * Sets the version of this Property.
	 * 
	 * @param version The version of this Property.
	 */
	public void setVersion(Integer version) {
	    log.debug("Entering setVersion(version = {})", version);
        this.version = version;
        log.debug("Exiting setVersion()");
    }
	
	
	
	/**
	 *  Assists in implementing Object.toString() methods using reflection.
	 *  This class uses reflection to determine the fields to append. Because 
	 *  these fields are usually private, the class changes the visibility of 
	 *  the fields. This will fail under a security manager,
	 *  unless the appropriate permissions are set up correctly. 
	 */
	@Override
	public String toString() {
	    log.debug("Entering toString()");
        String toString = ReflectionToStringBuilder.toString(this,
                ToStringStyle.SHORT_PREFIX_STYLE);
        log.debug("Exiting toString(): {}", toString);
        return toString;
    }
	
	/**
	 * If you call clear, all currently managed objects of the EntityManager 
	 * will be detached and the status is not synchronized with the database. 
	 * As long as the objects are not explicitly attached again, they are 
	 * standard Java objects, whose change does not have any effect on 
	 * the database.
	 */
	@Transactional
    public void clear() {
	    log.debug("Entering clear()");
        if (this.entityManager == null) 
        	this.entityManager = entityManager();
        this.entityManager.clear();
        log.debug("Exiting clear()");
    }

	/**
	 * Synchronize the persistence context to the underlying database. 
	 */
	@Transactional
    public void flush() {
	    log.debug("Entering flush()");
        if (this.entityManager == null)
        	this.entityManager = entityManager();
        this.entityManager.flush();
        log.debug("Exiting flush()");
    }

	
	/**
	 * If this object is detached, the merge() method will merge them back into
	 * the EntityManager to become managed again. Note that changes to detached
	 * entity objects are not stored in the database.
	 * 
	 * @return The merged DigitalObject.
	 */
	@Transactional
    public Property merge() {
	    log.debug("Entering merge()");
        if (this.entityManager == null)
            this.entityManager = entityManager();
        Property merged = this.entityManager.merge(this);
        this.entityManager.flush();
        log.debug("Exiting merge(): {}", merged);
        return merged;
    }

	
	
	/**
	 * Persists this object to the persistence context. 
	 */
	@Transactional
    public void persist() {
	    log.debug("Entering persist()");
        if (this.entityManager == null) {
            this.entityManager = entityManager();
        }
        this.entityManager.persist(this);
        log.debug("Exiting persist()");
    }

	
	
	/**
	 * Removes this object from the persistence context. 
	 */
	@Transactional
    public void remove() {
	    log.debug("Entering remove()");
        if (this.entityManager == null)
            this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Property attached = Property.findProperty(this.primaryId);
            this.entityManager.remove(attached);
        }
        log.debug("Exiting remove()");
    }
	
	/**
     * Sets the logger for this class.
     * 
     * @param log The logger for this class.
     */
    @AutowiredLogger
    public void setLog(Logger log) {
        this.log = log;
    }
}
