package gov.hawaii.digitalarchives.hida.core.model.record;


import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import javax.persistence.Version;

import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.slf4j.Logger;
import org.springbyexample.util.log.AutowiredLogger;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

/**
 * RightsBasis model class associated with a {@link
 * RightsStatement}.  All rights basis contain a date range of when they are
 * effective, as well as a note describing what type of restrictions they
 * impose.
 *
 * @author Dongie Agnir
 */
@Configurable
@Entity
@Inheritance(strategy=InheritanceType.SINGLE_TABLE)
@Table(name = "RIGHTS_BASIS")
public class RightsBasis implements Serializable {
    
    /**
     * Autogenerated for this entity to be serializable. Implementing
     * Serializable isn't strictly necessary as far as the JPA specification
     * is concerned. However, it is needed if you're going to use caching or
     * EJB remoting, both of which require objects to be Serializable.
     * Caching is a key component in achieving optimal performance in any
     * JPA application, so implementing the Serializable interface is a good
     * habit to adopt. Note: This was taken from the book titled, 
     * "Spring Persistence with Hibernate", 2010, Fisher and Murphy. 
     */
    private static final long serialVersionUID = 1193979011044819989L;

    /** The Unique Primary Identifier for a RightsBasis. */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "RIGHTS_BASIS_ID")
    private Long primaryId;
    
    /**
     * Specifies the version field or property of an entity class that serves 
     * as its optimistic lock value. The version is used to ensure 
     * integrity when performing the merge operation and for optimistic 
     * concurrency control. 
     */
    @Version
    @Column(name = "VERSION")
    private Integer version;
    
    /** The start date that this rights basis came into effect. */
    @Column(name = "START_DATE")
    Date startDate;

    /** The end date that this rights basis ends. */
    @Column(name = "END_DATE")
    Date endDate;

    /** Note about this rights basis. */
    @Column(name = "NOTE")
    String note;
    
    /**
     * An {@link EntityManager} instance is associated with a persistence 
     * context. A persistence context is a set of entity instances in which 
     * for any persistent entity identity there is a unique entity instance. 
     * Within the persistence context,the entity instances and their life cycle
     * are  managed. The EntityManager API is used to create and remove 
     * persistent entity instances, to find  entities by their primary key, 
     * and to query over entities. As long as an object is attached to an 
     * EntityManager, all changes to the object will be synchronized with 
     * the database automatically (Meaning that this object is attached to the
     * 'persistence context'). 
     */
    @PersistenceContext
    transient EntityManager entityManager;
    
    /** Autowired logger to log this class */
    protected transient Logger log = null;
    
    /**
     * Oracle specifications state that the class must have a public 
     * or protected, no-argument constructor. The class may have other 
     * constructors. 
     * http://docs.oracle.com/javaee/7/tutorial/doc/persistence-intro001.htm
     */
    public RightsBasis() {

    }

    
    /**
     * @return The Unique Primary Identifier for a RightsBasis.
     */
    public Long getPrimaryId() {
        log.debug("Entering getPrimaryId()");
        log.debug("Exiting getPrimaryId(): {}", this.primaryId);
        return this.primaryId;
    }



    /**
     * Used to create a RightsBasis object.
     * 
     * @param startDate The start date that this rights basis came into effect.
     * @param endDate   The end date that this rights basis ends.
     * @param note      Note about this rights basis.
     */
    public RightsBasis(final Date startDate, final Date endDate, final String note) {
        Assert.notNull(startDate, "startDate cannot be null.");
        Assert.notNull(endDate, "endDate cannot be null.");
        Assert.isTrue(endDate.getTime() >= startDate.getTime(), 
                "endDate must be after startDate.");
        Assert.notNull(note, "note cannot be null.");

        this.startDate = new Date(startDate.getTime());

        this.endDate = new Date(endDate.getTime());

        this.note = note;
    }

    
    
    /**
     * A new entity manager is created for every persistence related function. 
     * This pattern is called an “entitymanger-per-request” pattern. 
     * In this model, a request from the client is sent to the server 
     * (where the JPA persistence layer runs), a new EntityManager is opened, 
     * and all database operations are executed in this unit of work. Once the 
     * work has been completed (and the response for the client has been
     * prepared), the persistence context is flushed and closed, as well 
     * as the entity manager object. You would also use a single database 
     * transaction to serve the clients request. The relationship between 
     * the two is one-to-one and this model is a perfect fit for many 
     * applications.
     * 
     * http://docs.jboss.org/hibernate/entitymanager/ 
     * 
     * @return A new EntityManager to do database operations.
     */
    public static final EntityManager entityManager() {
        staticMethodLogger().debug("Entering entityManager()");
        EntityManager em = new RightsBasis().entityManager;   
        if (em == null)  {
            String errorMessage = "Entity manager has not been injected "
                    + "(is the Spring Aspects JAR configured as an AJC/AJDT aspects library?'";
            staticMethodLogger().error(errorMessage);
            throw new IllegalStateException(errorMessage);
        }
        
        staticMethodLogger().debug("Exiting entityManager(): {}", em);
        return em;
    }
    
    /**
     * Used to log static methods of this class. Since
     * Autowired logger cannot be "static", this method allows an 
     * Autowired Logger to be used within static methods.
     * 
     * @return A new logger to do logging operations.
     */
    protected static final Logger staticMethodLogger() {
        Logger log = new RightsBasis().log;
        if (log == null) {
            throw new IllegalStateException("Logger has not been"
                + " injected!");
        }
        return log;
    }

    /** @return The start date that this rights basis came into effect. */
    public Date getStartDate() {
        log.debug("Entering getStartDate()");
        if (startDate == null) {
            return null;
        }
        Date startDate = new Date(this.startDate.getTime());
        log.debug("Exiting getStartDate(): {}", startDate);
        return startDate;
    }

    /** @return The end date that this rights basis ends. */
    public Date getEndDate() {
        log.debug("Entering getEndDate()");
        if (endDate == null) {
            return null;
        }
        Date endDate = new Date(this.endDate.getTime());
        log.debug("Exiting getEndDate(): {}", endDate);
        return endDate;
    }

    /** @return Note about this rights basis. */
    public String getNote() {
        log.debug("Entering getNote()");
        log.debug("Exiting getNote(): {}", this.note);
        return this.note;
    }
    
    
    /**
     * Gets the amount of RightsBasis objects that are currently 
     * in the database.
     * 
     * @return The amount of RightsBasis objects that are 
     *         currently in the database.
     */
    public static long countRightsBasis() {
        staticMethodLogger().debug("Entering countRightsBasis()");
        long count = entityManager().createQuery("SELECT COUNT(o) FROM RightsBasis o",
                Long.class).getSingleResult();
        staticMethodLogger().debug("Exiting countRightsBasis(): {}", count);
        return count;
    }

    
    
    /**
     * Gets all of the RightsBasis objects from the database 
     * and puts them in a collection. 
     * 
     * @return The collection of RightsBasiss that are 
     *         in the database.
     */
    public static List<RightsBasis> findAllRightsBasis() {
        staticMethodLogger().debug("Entering findAllRightsBasis()");
        List<RightsBasis> rightsBasis = entityManager()
                .createQuery("SELECT o FROM RightsBasis o", RightsBasis.class)
                .getResultList();
        staticMethodLogger().debug("Exiting findAllRightsBasis(): {}", rightsBasis);
        return rightsBasis;
    }

    
    
    /**
     * Queries for a RightsBasis based on its primaryId.
     * 
     * @param primaryId  The long primaryId associated with the 
     *                   RightsBasis that you want to search the database 
     *                   for.
     * @return  The associated RightsBasis matching the primaryId you were
     *          searching for, or null if not found.
     */
    public static RightsBasis findRightsBasis(Long primaryId) {
        staticMethodLogger().debug("Entering findRightsBasis(primaryId = {})", primaryId);
        if (primaryId == null) {
            staticMethodLogger().debug("Exiting findRightsBasis(): null)");
            return null;
        }
        RightsBasis rightsBasis = entityManager().find(RightsBasis.class, primaryId);
        staticMethodLogger().debug("Exiting findRightsBasis(): {})", rightsBasis);
        return rightsBasis;
    }

    
    

    /**
     * Gets a certain subset of RightsBasis based 
     * on the range desired.
     * 
     * @param firstResult  The beginning of the range of values.
     * @param maxResults   The last element of the range of values.
     * @return             The collection of RightsBasis based 
     *                     on the range desired. 
     */
    public static List<RightsBasis> findRightsBasisEntries(int firstResult, int maxResults) {
        staticMethodLogger().debug("Entering findRightsBasisEntries(firstResult = {}, " +
                "maxResults = {})",
                firstResult, maxResults);
        
        List<RightsBasis> rightsBasis = entityManager()
                .createQuery("SELECT o FROM RightsBasis o", RightsBasis.class)
                .setFirstResult(firstResult).setMaxResults(maxResults)
                .getResultList();
        
        staticMethodLogger().debug("Exiting findRightsBasisEntries(): {}", rightsBasis);
        return rightsBasis;
    }

    
    
    /**
     * Persists this object to the persistence context. 
     */
    @Transactional
    public void persist() {
        log.debug("Entering persist()");
        if (this.entityManager == null)
            this.entityManager = entityManager();
        this.entityManager.persist(this);
        log.debug("Exiting persist()");
    }

    
    
    /**
     * Removes this object from the persistence context. 
     */
    @Transactional
    public void remove() {
        log.debug("Entering remove()");
        if (this.entityManager == null) 
            this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            RightsBasis attached = RightsBasis.findRightsBasis(this.primaryId);
            this.entityManager.remove(attached);
        }
        log.debug("Exiting remove()");
    }

    
    
    /**
     * Synchronize the persistence context to the underlying database. 
     */
    @Transactional
    public void flush() {
        log.debug("Entering flush()");
        if (this.entityManager == null) 
            this.entityManager = entityManager();
        this.entityManager.flush();
        log.debug("Exiting flush()");
    }

    
    
    /**
     * If you call clear, all currently managed objects of the EntityManager 
     * will be detached and the status is not synchronized with the database. 
     * As long as the objects are not explicitly attached again, they are 
     * standard Java objects, whose change does not have any effect on 
     * the database.
     */
    @Transactional
    public void clear() {
        log.debug("Entering clear()");
        if (this.entityManager == null) 
            this.entityManager = entityManager();
        this.entityManager.clear();
        log.debug("Exiting clear()");
    }

    
    
    /**
     * If this object is detached, the merge() method will merge them back into
     * the EntityManager to become managed again. Note that changes to detached
     * entity objects are not stored in the database.
     * 
     * @return The merged RightsBasis.
     */
    @Transactional
    public RightsBasis merge() {
        if (this.entityManager == null) 
            this.entityManager = entityManager();
        RightsBasis merged = this.entityManager.merge(this);
        this.entityManager.flush();
        log.debug("Exiting merge(): {}", merged);
        return merged;
    }

    
    
    /**
     *  Assists in implementing Object.toString() methods using reflection.
     *  This class uses reflection to determine the fields to append. Because 
     *  these fields are usually private, the class changes the visibility of 
     *  the fields. This will fail under a security manager,
     *  unless the appropriate permissions are set up correctly. 
     */
    @Override
    public String toString() {
        log.debug("Entering toString()");
        String toString = ReflectionToStringBuilder.toString(this,
                ToStringStyle.SHORT_PREFIX_STYLE);
        log.debug("Exiting toString(): {}", toString);
        return toString;
    }
    
    
    
    /**
     * Gets the version of this RightsBasis.
     * 
     * @return  The version of this RightsBasis.
     */
    public Integer getVersion() {
        log.debug("Entering getVersion()");
        log.debug("Exiting getVersion(): {}", this.version);
        return this.version;
    }

    
    
    /**
     * Sets the version of this RightsBasis.
     * 
     * @param version  The version of this RightsBasis.
     */
    public void setVersion(Integer version) {
        log.debug("Entering setVersion(version = {})", version);
        this.version = version;
        log.debug("Exiting setVersion()");
    }
    
    /**
     * Sets the logger for this class.
     * 
     * @param log The logger for this class.
     */
    @AutowiredLogger
    public void setLog(Logger log) {
        this.log = log;
    }

}
