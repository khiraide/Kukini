package gov.hawaii.digitalarchives.hida.core.model.accession;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import javax.persistence.Version;

import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.slf4j.Logger;
import org.springbyexample.util.log.AutowiredLogger;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

/**
 * Represents a ManifestFile inside a directory. Holds information about the
 * name, size, and creation date of the ManifestFile.
 * 
 * @author Dongie Agnir
 */
@Configurable
@Entity
@Table(name = "MANIFEST_FILE")
@JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class, property = "@id")
public class ManifestFile implements Serializable {

    /**
     * Autogenerated for this entity to be serializable. Implementing
     * Serializable isn't strictly necessary as far as the JPA specification
     * is concerned. However, it is needed if you're going to use caching or
     * EJB remoting, both of which require objects to be Serializable.
     * Caching is a key component in achieving optimal performance in any
     * JPA application, so implementing the Serializable interface is a good
     * habit to adopt. Note: This was taken from the book titled, 
     * "Spring Persistence with Hibernate", 2010, Fisher and Murphy. 
     */
    private static final long serialVersionUID = -2404414197615484454L;

    /**
     * The primary key of a ManifestFile.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "MANIFEST_FILE_ID")
    private Long primaryId;

    /**
     * Specifies the version field or property of an entity class that serves 
     * as its optimistic lock value. The version is used to ensure integrity 
     * when performing the merge operation and for optimistic concurrency 
     * control.
     */
    @Version
    @Column(name = "VERSION")
    private Integer version;

    /**
     * Name of this ManifestFile.
     */
    @Column(name = "NAME")
    private String name;

    /**
     * The date that this ManifestFile was created.
     */
    @Column(name = "CREATED_DATE")
    private Date createdDate;

    /**
     * The size of this ManifestFile.
     */
    @Column(name = "SIZE")
    private long size;

    /**
     * Many ManifestFile objects are associated with a single Directory object.
     * A Directory object's primary key will be used as as a foreign key in 
     * this ManifestFile object/table.
     */
    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "MANIFEST_DIRECTORY_ID")
    private ManifestDirectory directory;
    
    /**
     * AutowiredLogger for logging purposes.
     */
    private transient Logger log = null;

    /**
     * Oracle specifications state that the class must have a public or
     * protected, no-argument constructor. The class may have other
     * constructors.
     * 
     * http://docs.oracle.com/javaee/7/tutorial/doc/persistence-intro001.htm
     */
    public ManifestFile() {

    }

    /**
     * Creates a ManifestFile with properly set fields.
     * 
     * @param name        The name of this ManifestFile.
     * @param createdDate The date that this ManifestFile was created.
     * @param size        The size of this ManifestFile.
     * @param directory   The {@link ManifestDirectory} that this ManifestFile 
     *                    is associated with.
     */
    public ManifestFile(final String name, final Date createdDate,
            final long size, final ManifestDirectory directory) {
        
        Assert.notNull(name, "name cannot be null");
        Assert.hasLength(name, "name cannot be empty");
        Assert.notNull(createdDate, "created date cannot be null");
        Assert.notNull(directory, "directory cannot be null");
        if (size < 0) {
            throw new IllegalArgumentException("size cannot less than 0, size is: '" 
                                                + size + "'");
        }
        
        this.name = name;
        this.createdDate = createdDate;
        this.size = size;
        this.directory = directory;
    }

    /**
     * @return The Name of this ManifestFile.
     */
    public String getName() {
        //log.debug("Entering getName()");
        //log.debug("Exiting getName(): {}", this.name);
        return this.name;
    }

    /**
     * @return The date that this ManifestFile was created.
     */
    public Date getCreatedDate() {
        //log.debug("Entering getCreatedDate()");
        if (createdDate != null) {
            Date createdDate = new Date(this.createdDate.getTime());
            //log.debug("Exiting getCreatedDate(): {}", createdDate);
            return createdDate;
        } else {
            //log.debug("Exiting getCreatedDate(): null");
            return null;
        }
    }

    /**
     * @return The size of this ManifestFile.
     */
    public long getSize() {
        //log.debug("Entering getSize()");
        //log.debug("Exiting getSize(): {}", this.size);
        return this.size;
    }

    /**
     * Get the Directory associated with this ManifestFile.
     * 
     * @return The Directory associated with this ManifestFile.
     */
    public ManifestDirectory getDirectory() {
        //log.debug("Entering getDirectory()");
        //log.debug("Exiting getDirectory(): {}", this.directory);
        return this.directory;
    }

    /**
     * Gets the primaryId associated with this ManifestFile.
     * 
     * @return The primaryId associated with this ManifestFile.
     */
    public Long getPrimaryId() {
        //log.debug("Entering getPrimaryId()");
        //log.debug("Exiting getPrimaryId(): {}", this.primaryId);
        return this.primaryId;
    }

    /**
     * Gets the version of this ManifestFile.
     * 
     * @return The version of this ManifestFile.
     */
    public Integer getVersion() {
        //log.debug("Entering getVersion()");
        //log.debug("Exiting getVersion(): {}", this.version);
        return this.version;
    }

    /**
     * Sets the version of this ManifestFile.
     * 
     * @param version The version of this ManifestFile.
     */
    public void setVersion(Integer version) {
        //log.debug("Entering setVersion(version = {})", version);
        this.version = version;
        //log.debug("Exiting setVersion()");
    }

    /**
     * An {@link EntityManager} instance is associated with a persistence
     * context. A persistence context is a set of entity instances in which for
     * any persistent entity identity there is a unique entity instance. Within
     * the persistence context,the entity instances and their life cycle are
     * managed. The EntityManager API is used to create and remove persistent
     * entity instances, to find entities by their primary key, and to query
     * over entities. As long as an object is attached to an EntityManager, all
     * changes to the object will be synchronized with the database
     * automatically (Meaning that this object is attached to the 'persistence
     * context').
     */
    @PersistenceContext
    transient EntityManager entityManager;

    /**
     * A new entity manager is created for every persistence related function. 
     * This pattern is called an “entitymanger-per-request” pattern. 
     * In this model, a request from the client is sent to the server 
     * (where the JPA persistence layer runs), a new EntityManager is opened, 
     * and all database operations are executed in this unit of work. Once the 
     * work has been completed (and the response for the client has been
     * prepared), the persistence context is flushed and closed, as well 
     * as the entity manager object. You would also use a single database 
     * transaction to serve the clients request. The relationship between 
     * the two is one-to-one and this model is a perfect fit for many 
     * applications.
     *  
     * http://docs.jboss.org/hibernate/entitymanager/
     *  
     * @return A new EntityManager to do database operations.
     */
    public static final EntityManager entityManager() {
        staticMethodLogger().debug("Entering entityManager()");
        EntityManager em = new ManifestFile().entityManager;
        if (em == null) {
            String errorMessage = "Throwing IllegalStateException in "
                    + "entityManager(): 'Entity manager has not been injected "
                + "(is the Spring Aspects JAR configured as an AJC/AJDT aspects library?'";
            
            staticMethodLogger().error(errorMessage);
            throw new IllegalStateException(errorMessage);
        }
        staticMethodLogger().debug("Exiting entityManager(): {}", em);
        return em;
    }
    
    /**
     * Used to log static methods of this class. Since Autowired logger cannot 
     * be "static", this method allows an Autowired Logger to be used within 
     * static methods.
     * 
     * @return A new logger to do logging operations.
     */
    private static final Logger staticMethodLogger() {
        Logger log = new ManifestFile().log;
        if (log == null) {
            throw new IllegalStateException("AutowiredLogger has not been"
                    + " injected!");
        }
        return log;
    }

    /**
     * Gets the amount of ManifestFile objects that are currently in the
     * database.
     * 
     * @return The amount of ManifestFile objects that are currently in the
     *         database.
     */
    public static long countManifestFiles() {
        staticMethodLogger().debug("Entering countManifestFiles()");
        long count = entityManager().createQuery("SELECT COUNT(o) FROM ManifestFile o",
                Long.class).getSingleResult();
        staticMethodLogger().debug("Exiting countManifestFiles(): {}", count);
        return count;
    }

    /**
     * Gets all of the ManifestFile objects from the database and puts them in
     * a collection.
     * 
     * @return The collection of ManifestFile objects that are in the database.
     */
    public static List<ManifestFile> findAllManifestFiles() {
        staticMethodLogger().debug("Entering findAllManifestFiles()");
        List<ManifestFile> manifestFiles = entityManager()
                .createQuery("SELECT o FROM ManifestFile o", ManifestFile.class).getResultList();
        staticMethodLogger().debug("Exiting findAllManifestFiles(): {}", manifestFiles);
        return manifestFiles;
    }

    /**
     * Gets a ManifestFile from the database according to its primaryId.
     * 
     * @param primaryId The primary key of a ManifestFile.
     * @return The ManifestFile associated with the id that was passed in or
     *         null if not found.
     */
    public static ManifestFile findManifestFile(Long primaryId) {
        staticMethodLogger().debug("Entering findManifestFile(primaryId = {})", primaryId);
        if (primaryId == null) {
            staticMethodLogger().debug("Exiting findManifestFile(): null)");
            return null;
        }
        ManifestFile manifestFile = entityManager().find(ManifestFile.class, primaryId);
        staticMethodLogger().debug("Exiting findManifestFile(): {})", manifestFile);
        return manifestFile;
    }

    /**
     * Gets a certain subset of ManifestFiles based on the range desired.
     * 
     * @param firstResult The beginning of the range of values.
     * @param maxResults The last element of the range of values.
     * @return The collection of ManifestFiles based on the range desired.
     */
    public static List<ManifestFile> findManifestFileEntries(int firstResult, int maxResults) {
        staticMethodLogger().debug("Entering findManifestFileEntries(firstResult = {}, " +
                "maxResults = {})", firstResult, maxResults);
        
        List<ManifestFile> manifestFiles = entityManager()
                .createQuery("SELECT o FROM ManifestFile o", ManifestFile.class)
                .setFirstResult(firstResult).setMaxResults(maxResults)
                .getResultList();
        
        staticMethodLogger().debug("Exiting findManifestFileEntries(): {}", manifestFiles);
        return manifestFiles;
    }

    /**
     * Persists this object to the persistence context.
     */
    @Transactional
    public void persist() {
        //log.debug("Entering persist()");
        if (this.entityManager == null)
            this.entityManager = entityManager();
        this.entityManager.persist(this);
        //log.debug("Exiting persist()");
    }

    /**
     * Removes this object from the persistence context.
     */
    @Transactional
    public void remove() {
        //log.debug("Entering remove()");
        if (this.entityManager == null)
            this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            ManifestFile attached = ManifestFile.findManifestFile(this.primaryId);
            this.entityManager.remove(attached);
        }
        //log.debug("Exiting remove()");
    }

    /**
     * Synchronize the persistence context to the underlying database.
     */
    @Transactional
    public void flush() {
        //log.debug("Entering flush()");
        if (this.entityManager == null)
            this.entityManager = entityManager();
        this.entityManager.flush();
        //log.debug("Exiting flush()");
    }

    /**
     * If you call clear, all currently managed objects of the EntityManager
     * will be detached and the status is not synchronized with the database. 
     * As long as the objects are not explicitly attached again, they are 
     * standard Java objects, whose change does not have any effect on the 
     * database.
     */
    @Transactional
    public void clear() {
        //log.debug("Entering clear()");
        if (this.entityManager == null)
            this.entityManager = entityManager();
        this.entityManager.clear();
        //log.debug("Exiting clear()");
    }

    /**
     * If this object is detached, the merge() method will merge them back into
     * the EntityManager to become managed again. Note that changes to detached
     * entity objects are not stored in the database.
     * 
     * @return The merged ManifestFile.
     */
    @Transactional
    public ManifestFile merge() {
        //log.debug("Entering merge()");
        if (this.entityManager == null)
            this.entityManager = entityManager();
        ManifestFile merged = this.entityManager.merge(this);
        this.entityManager.flush();
        //log.debug("Exiting merge(): {}", merged);
        return merged;
    }

    /**
     * Assists in implementing Object.toString() methods using reflection. This
     * class uses reflection to determine the fields to append. Because these
     * fields are usually private, the class changes the visibility of the
     * fields. This will fail under a security manager, unless the appropriate
     * permissions are set up correctly.
     */
    @Override
    public String toString() {
        //log.debug("Entering toString()");
        String toString = ReflectionToStringBuilder.toString(this,
                ToStringStyle.SHORT_PREFIX_STYLE);
        //log.debug("Exiting toString(): {}", toString);
        return toString;
    }
    
    
    /**
     * Sets the logger for this class.
     * 
     * @param log The logger for this class.
     */
    @AutowiredLogger
    public void setLog(Logger log) {
        this.log = log;
    }
}